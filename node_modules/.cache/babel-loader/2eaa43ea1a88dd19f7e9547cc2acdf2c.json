{"ast":null,"code":"// fetchHelper.js\n\n/**\n * For use with window.fetch\n */\nexport function jsonHeader() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.assign(options, {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  });\n} // Additional helper methods\n\nexport function getMetaContent(name) {\n  var header = document.querySelector(\"meta[name=\\\"\".concat(name, \"\\\"]\"));\n  return header && header.content;\n}\nexport function getAuthenticityToken() {\n  return getMetaContent('csrf-token');\n}\nexport function authenticityHeader() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.assign(options, {\n    'X-CSRF-Token': getAuthenticityToken(),\n    'X-Requested-With': 'XMLHttpRequest'\n  });\n}\n/**\n* Lets fetch include credentials in the request. This includes cookies and other possibly sensitive data.\n* Note: Never use for requests across (untrusted) domains.\n*/\n\nexport function safeCredentials() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.assign(options, {\n    credentials: 'include',\n    mode: 'same-origin',\n    headers: Object.assign(options.headers || {}, authenticityHeader(), jsonHeader())\n  });\n} // Use this function instead if you are using formData as body when uploading images\n\nexport function safeCredentialsFormData() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return Object.assign(options, {\n    credentials: 'include',\n    mode: 'same-origin',\n    headers: Object.assign(options.headers || {}, authenticityHeader())\n  });\n}\nexport function handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response.json();\n}","map":{"version":3,"sources":["/Users/User/fswd-twitter-clone/app/javascript/src/utils/fetchHelper.js"],"names":["jsonHeader","options","Object","assign","Accept","getMetaContent","name","header","document","querySelector","content","getAuthenticityToken","authenticityHeader","safeCredentials","credentials","mode","headers","safeCredentialsFormData","handleErrors","response","ok","Error","statusText","json"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAO,SAASA,UAAT,GAAkC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACrC,SAAOC,MAAM,CAACC,MAAP,CAAcF,OAAd,EAAuB;AAC5BG,IAAAA,MAAM,EAAE,kBADoB;AAE5B,oBAAgB;AAFY,GAAvB,CAAP;AAID,C,CAED;;AAEA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AACnC,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,uBAAqCH,IAArC,SAAf;AACA,SAAOC,MAAM,IAAIA,MAAM,CAACG,OAAxB;AACD;AAED,OAAO,SAASC,oBAAT,GAAgC;AACrC,SAAON,cAAc,CAAC,YAAD,CAArB;AACD;AAED,OAAO,SAASO,kBAAT,GAA0C;AAAA,MAAdX,OAAc,uEAAJ,EAAI;AAC/C,SAAOC,MAAM,CAACC,MAAP,CAAcF,OAAd,EAAuB;AAC5B,oBAAgBU,oBAAoB,EADR;AAE5B,wBAAoB;AAFQ,GAAvB,CAAP;AAID;AAED;AACF;AACA;AACA;;AACE,OAAO,SAASE,eAAT,GAAuC;AAAA,MAAdZ,OAAc,uEAAJ,EAAI;AAC5C,SAAOC,MAAM,CAACC,MAAP,CAAcF,OAAd,EAAuB;AAC5Ba,IAAAA,WAAW,EAAE,SADe;AAE5BC,IAAAA,IAAI,EAAE,aAFsB;AAG5BC,IAAAA,OAAO,EAAEd,MAAM,CAACC,MAAP,CAAeF,OAAO,CAACe,OAAR,IAAmB,EAAlC,EAAuCJ,kBAAkB,EAAzD,EAA6DZ,UAAU,EAAvE;AAHmB,GAAvB,CAAP;AAKD,C,CAED;;AACA,OAAO,SAASiB,uBAAT,GAA+C;AAAA,MAAdhB,OAAc,uEAAJ,EAAI;AACpD,SAAOC,MAAM,CAACC,MAAP,CAAcF,OAAd,EAAuB;AAC5Ba,IAAAA,WAAW,EAAE,SADe;AAE5BC,IAAAA,IAAI,EAAE,aAFsB;AAG5BC,IAAAA,OAAO,EAAEd,MAAM,CAACC,MAAP,CAAeF,OAAO,CAACe,OAAR,IAAmB,EAAlC,EAAuCJ,kBAAkB,EAAzD;AAHmB,GAAvB,CAAP;AAKD;AAED,OAAO,SAASM,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACD;;AACD,SAAOH,QAAQ,CAACI,IAAT,EAAP;AACD","sourcesContent":["// fetchHelper.js\n\n/**\n * For use with window.fetch\n */\nexport function jsonHeader(options = {}) {\n    return Object.assign(options, {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    });\n  }\n  \n  // Additional helper methods\n  \n  export function getMetaContent(name) {\n    const header = document.querySelector(`meta[name=\"${name}\"]`);\n    return header && header.content;\n  }\n  \n  export function getAuthenticityToken() {\n    return getMetaContent('csrf-token');\n  }\n  \n  export function authenticityHeader(options = {}) {\n    return Object.assign(options, {\n      'X-CSRF-Token': getAuthenticityToken(),\n      'X-Requested-With': 'XMLHttpRequest',\n    });\n  }\n  \n  /**\n  * Lets fetch include credentials in the request. This includes cookies and other possibly sensitive data.\n  * Note: Never use for requests across (untrusted) domains.\n  */\n  export function safeCredentials(options = {}) {\n    return Object.assign(options, {\n      credentials: 'include',\n      mode: 'same-origin',\n      headers: Object.assign((options.headers || {}), authenticityHeader(), jsonHeader()),\n    });\n  }\n  \n  // Use this function instead if you are using formData as body when uploading images\n  export function safeCredentialsFormData(options = {}) {\n    return Object.assign(options, {\n      credentials: 'include',\n      mode: 'same-origin',\n      headers: Object.assign((options.headers || {}), authenticityHeader()),\n    });\n  }\n  \n  export function handleErrors(response) {\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    return response.json();\n  }"]},"metadata":{},"sourceType":"module"}